/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.atang.thrift.thriftPool.example.client;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-28")
public class GmBcService {

  public interface Iface {

    public int broadcastByTopSid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException;

    public int broadcastByTopSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException;

    public int broadcastBySubSid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException;

    public int broadcastBySubSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException;

    public int multicastByUidSet(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data) throws org.apache.thrift.TException;

    public int unicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException;

    public int multicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data) throws org.apache.thrift.TException;

    public int broadcastByUserGroupId(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority) throws org.apache.thrift.TException;

    public long pingSaaSrv(long now) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void broadcastByTopSid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void broadcastByTopSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void broadcastBySubSid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void broadcastBySubSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void multicastByUidSet(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void unicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void multicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void broadcastByUserGroupId(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void pingSaaSrv(long now, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int broadcastByTopSid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_broadcastByTopSid(SvcType, topSid, uid, reqId, bcTypeId, data);
      return recv_broadcastByTopSid();
    }

    public void send_broadcastByTopSid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      broadcastByTopSid_args args = new broadcastByTopSid_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setBcTypeId(bcTypeId);
      args.setData(data);
      sendBase("broadcastByTopSid", args);
    }

    public int recv_broadcastByTopSid() throws org.apache.thrift.TException
    {
      broadcastByTopSid_result result = new broadcastByTopSid_result();
      receiveBase(result, "broadcastByTopSid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "broadcastByTopSid failed: unknown result");
    }

    public int broadcastByTopSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_broadcastByTopSidExceptUid(SvcType, topSid, uid, reqId, bcTypeId, data);
      return recv_broadcastByTopSidExceptUid();
    }

    public void send_broadcastByTopSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      broadcastByTopSidExceptUid_args args = new broadcastByTopSidExceptUid_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setBcTypeId(bcTypeId);
      args.setData(data);
      sendBase("broadcastByTopSidExceptUid", args);
    }

    public int recv_broadcastByTopSidExceptUid() throws org.apache.thrift.TException
    {
      broadcastByTopSidExceptUid_result result = new broadcastByTopSidExceptUid_result();
      receiveBase(result, "broadcastByTopSidExceptUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "broadcastByTopSidExceptUid failed: unknown result");
    }

    public int broadcastBySubSid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_broadcastBySubSid(SvcType, topSid, uid, reqId, subSid, bcTypeId, data);
      return recv_broadcastBySubSid();
    }

    public void send_broadcastBySubSid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      broadcastBySubSid_args args = new broadcastBySubSid_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setSubSid(subSid);
      args.setBcTypeId(bcTypeId);
      args.setData(data);
      sendBase("broadcastBySubSid", args);
    }

    public int recv_broadcastBySubSid() throws org.apache.thrift.TException
    {
      broadcastBySubSid_result result = new broadcastBySubSid_result();
      receiveBase(result, "broadcastBySubSid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "broadcastBySubSid failed: unknown result");
    }

    public int broadcastBySubSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_broadcastBySubSidExceptUid(SvcType, topSid, uid, reqId, subSid, bcTypeId, data);
      return recv_broadcastBySubSidExceptUid();
    }

    public void send_broadcastBySubSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      broadcastBySubSidExceptUid_args args = new broadcastBySubSidExceptUid_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setSubSid(subSid);
      args.setBcTypeId(bcTypeId);
      args.setData(data);
      sendBase("broadcastBySubSidExceptUid", args);
    }

    public int recv_broadcastBySubSidExceptUid() throws org.apache.thrift.TException
    {
      broadcastBySubSidExceptUid_result result = new broadcastBySubSidExceptUid_result();
      receiveBase(result, "broadcastBySubSidExceptUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "broadcastBySubSidExceptUid failed: unknown result");
    }

    public int multicastByUidSet(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data) throws org.apache.thrift.TException
    {
      send_multicastByUidSet(SvcType, topSid, uid, reqId, bcTypeId, uidSet, data);
      return recv_multicastByUidSet();
    }

    public void send_multicastByUidSet(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data) throws org.apache.thrift.TException
    {
      multicastByUidSet_args args = new multicastByUidSet_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setBcTypeId(bcTypeId);
      args.setUidSet(uidSet);
      args.setData(data);
      sendBase("multicastByUidSet", args);
    }

    public int recv_multicastByUidSet() throws org.apache.thrift.TException
    {
      multicastByUidSet_result result = new multicastByUidSet_result();
      receiveBase(result, "multicastByUidSet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multicastByUidSet failed: unknown result");
    }

    public int unicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_unicastToClient(SvcType, topSid, uid, reqId, bcTypeId, data);
      return recv_unicastToClient();
    }

    public void send_unicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data) throws org.apache.thrift.TException
    {
      unicastToClient_args args = new unicastToClient_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setBcTypeId(bcTypeId);
      args.setData(data);
      sendBase("unicastToClient", args);
    }

    public int recv_unicastToClient() throws org.apache.thrift.TException
    {
      unicastToClient_result result = new unicastToClient_result();
      receiveBase(result, "unicastToClient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unicastToClient failed: unknown result");
    }

    public int multicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data) throws org.apache.thrift.TException
    {
      send_multicastToClient(SvcType, topSid, uid, reqId, bcTypeId, uidSet, groupId, data);
      return recv_multicastToClient();
    }

    public void send_multicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data) throws org.apache.thrift.TException
    {
      multicastToClient_args args = new multicastToClient_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setBcTypeId(bcTypeId);
      args.setUidSet(uidSet);
      args.setGroupId(groupId);
      args.setData(data);
      sendBase("multicastToClient", args);
    }

    public int recv_multicastToClient() throws org.apache.thrift.TException
    {
      multicastToClient_result result = new multicastToClient_result();
      receiveBase(result, "multicastToClient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multicastToClient failed: unknown result");
    }

    public int broadcastByUserGroupId(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority) throws org.apache.thrift.TException
    {
      send_broadcastByUserGroupId(SvcType, topSid, uid, reqId, rUserGroupId, data, size, priority);
      return recv_broadcastByUserGroupId();
    }

    public void send_broadcastByUserGroupId(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority) throws org.apache.thrift.TException
    {
      broadcastByUserGroupId_args args = new broadcastByUserGroupId_args();
      args.setSvcType(SvcType);
      args.setTopSid(topSid);
      args.setUid(uid);
      args.setReqId(reqId);
      args.setRUserGroupId(rUserGroupId);
      args.setData(data);
      args.setSize(size);
      args.setPriority(priority);
      sendBase("broadcastByUserGroupId", args);
    }

    public int recv_broadcastByUserGroupId() throws org.apache.thrift.TException
    {
      broadcastByUserGroupId_result result = new broadcastByUserGroupId_result();
      receiveBase(result, "broadcastByUserGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "broadcastByUserGroupId failed: unknown result");
    }

    public long pingSaaSrv(long now) throws org.apache.thrift.TException
    {
      send_pingSaaSrv(now);
      return recv_pingSaaSrv();
    }

    public void send_pingSaaSrv(long now) throws org.apache.thrift.TException
    {
      pingSaaSrv_args args = new pingSaaSrv_args();
      args.setNow(now);
      sendBase("pingSaaSrv", args);
    }

    public long recv_pingSaaSrv() throws org.apache.thrift.TException
    {
      pingSaaSrv_result result = new pingSaaSrv_result();
      receiveBase(result, "pingSaaSrv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pingSaaSrv failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void broadcastByTopSid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      broadcastByTopSid_call method_call = new broadcastByTopSid_call(SvcType, topSid, uid, reqId, bcTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class broadcastByTopSid_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private int bcTypeId;
      private java.lang.String data;
      public broadcastByTopSid_call(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.bcTypeId = bcTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastByTopSid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        broadcastByTopSid_args args = new broadcastByTopSid_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setBcTypeId(bcTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_broadcastByTopSid();
      }
    }

    public void broadcastByTopSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      broadcastByTopSidExceptUid_call method_call = new broadcastByTopSidExceptUid_call(SvcType, topSid, uid, reqId, bcTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class broadcastByTopSidExceptUid_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private int bcTypeId;
      private java.lang.String data;
      public broadcastByTopSidExceptUid_call(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.bcTypeId = bcTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastByTopSidExceptUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        broadcastByTopSidExceptUid_args args = new broadcastByTopSidExceptUid_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setBcTypeId(bcTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_broadcastByTopSidExceptUid();
      }
    }

    public void broadcastBySubSid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      broadcastBySubSid_call method_call = new broadcastBySubSid_call(SvcType, topSid, uid, reqId, subSid, bcTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class broadcastBySubSid_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private long subSid;
      private int bcTypeId;
      private java.lang.String data;
      public broadcastBySubSid_call(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.subSid = subSid;
        this.bcTypeId = bcTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastBySubSid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        broadcastBySubSid_args args = new broadcastBySubSid_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setSubSid(subSid);
        args.setBcTypeId(bcTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_broadcastBySubSid();
      }
    }

    public void broadcastBySubSidExceptUid(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      broadcastBySubSidExceptUid_call method_call = new broadcastBySubSidExceptUid_call(SvcType, topSid, uid, reqId, subSid, bcTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class broadcastBySubSidExceptUid_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private long subSid;
      private int bcTypeId;
      private java.lang.String data;
      public broadcastBySubSidExceptUid_call(int SvcType, long topSid, long uid, java.lang.String reqId, long subSid, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.subSid = subSid;
        this.bcTypeId = bcTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastBySubSidExceptUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        broadcastBySubSidExceptUid_args args = new broadcastBySubSidExceptUid_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setSubSid(subSid);
        args.setBcTypeId(bcTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_broadcastBySubSidExceptUid();
      }
    }

    public void multicastByUidSet(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multicastByUidSet_call method_call = new multicastByUidSet_call(SvcType, topSid, uid, reqId, bcTypeId, uidSet, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multicastByUidSet_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private int bcTypeId;
      private java.util.Set<java.lang.Long> uidSet;
      private java.lang.String data;
      public multicastByUidSet_call(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.bcTypeId = bcTypeId;
        this.uidSet = uidSet;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multicastByUidSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multicastByUidSet_args args = new multicastByUidSet_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setBcTypeId(bcTypeId);
        args.setUidSet(uidSet);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multicastByUidSet();
      }
    }

    public void unicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unicastToClient_call method_call = new unicastToClient_call(SvcType, topSid, uid, reqId, bcTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unicastToClient_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private int bcTypeId;
      private java.lang.String data;
      public unicastToClient_call(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.bcTypeId = bcTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unicastToClient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unicastToClient_args args = new unicastToClient_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setBcTypeId(bcTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unicastToClient();
      }
    }

    public void multicastToClient(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multicastToClient_call method_call = new multicastToClient_call(SvcType, topSid, uid, reqId, bcTypeId, uidSet, groupId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multicastToClient_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private int bcTypeId;
      private java.util.Set<java.lang.Long> uidSet;
      private long groupId;
      private java.lang.String data;
      public multicastToClient_call(int SvcType, long topSid, long uid, java.lang.String reqId, int bcTypeId, java.util.Set<java.lang.Long> uidSet, long groupId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.bcTypeId = bcTypeId;
        this.uidSet = uidSet;
        this.groupId = groupId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multicastToClient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multicastToClient_args args = new multicastToClient_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setBcTypeId(bcTypeId);
        args.setUidSet(uidSet);
        args.setGroupId(groupId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multicastToClient();
      }
    }

    public void broadcastByUserGroupId(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      broadcastByUserGroupId_call method_call = new broadcastByUserGroupId_call(SvcType, topSid, uid, reqId, rUserGroupId, data, size, priority, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class broadcastByUserGroupId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int SvcType;
      private long topSid;
      private long uid;
      private java.lang.String reqId;
      private UserGroupIdType rUserGroupId;
      private java.lang.String data;
      private int size;
      private short priority;
      public broadcastByUserGroupId_call(int SvcType, long topSid, long uid, java.lang.String reqId, UserGroupIdType rUserGroupId, java.lang.String data, int size, short priority, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.SvcType = SvcType;
        this.topSid = topSid;
        this.uid = uid;
        this.reqId = reqId;
        this.rUserGroupId = rUserGroupId;
        this.data = data;
        this.size = size;
        this.priority = priority;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastByUserGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        broadcastByUserGroupId_args args = new broadcastByUserGroupId_args();
        args.setSvcType(SvcType);
        args.setTopSid(topSid);
        args.setUid(uid);
        args.setReqId(reqId);
        args.setRUserGroupId(rUserGroupId);
        args.setData(data);
        args.setSize(size);
        args.setPriority(priority);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_broadcastByUserGroupId();
      }
    }

    public void pingSaaSrv(long now, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pingSaaSrv_call method_call = new pingSaaSrv_call(now, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pingSaaSrv_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long now;
      public pingSaaSrv_call(long now, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.now = now;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pingSaaSrv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pingSaaSrv_args args = new pingSaaSrv_args();
        args.setNow(now);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pingSaaSrv();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("broadcastByTopSid", new broadcastByTopSid());
      processMap.put("broadcastByTopSidExceptUid", new broadcastByTopSidExceptUid());
      processMap.put("broadcastBySubSid", new broadcastBySubSid());
      processMap.put("broadcastBySubSidExceptUid", new broadcastBySubSidExceptUid());
      processMap.put("multicastByUidSet", new multicastByUidSet());
      processMap.put("unicastToClient", new unicastToClient());
      processMap.put("multicastToClient", new multicastToClient());
      processMap.put("broadcastByUserGroupId", new broadcastByUserGroupId());
      processMap.put("pingSaaSrv", new pingSaaSrv());
      return processMap;
    }

    public static class broadcastByTopSid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastByTopSid_args> {
      public broadcastByTopSid() {
        super("broadcastByTopSid");
      }

      public broadcastByTopSid_args getEmptyArgsInstance() {
        return new broadcastByTopSid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public broadcastByTopSid_result getResult(I iface, broadcastByTopSid_args args) throws org.apache.thrift.TException {
        broadcastByTopSid_result result = new broadcastByTopSid_result();
        result.success = iface.broadcastByTopSid(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class broadcastByTopSidExceptUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastByTopSidExceptUid_args> {
      public broadcastByTopSidExceptUid() {
        super("broadcastByTopSidExceptUid");
      }

      public broadcastByTopSidExceptUid_args getEmptyArgsInstance() {
        return new broadcastByTopSidExceptUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public broadcastByTopSidExceptUid_result getResult(I iface, broadcastByTopSidExceptUid_args args) throws org.apache.thrift.TException {
        broadcastByTopSidExceptUid_result result = new broadcastByTopSidExceptUid_result();
        result.success = iface.broadcastByTopSidExceptUid(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class broadcastBySubSid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastBySubSid_args> {
      public broadcastBySubSid() {
        super("broadcastBySubSid");
      }

      public broadcastBySubSid_args getEmptyArgsInstance() {
        return new broadcastBySubSid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public broadcastBySubSid_result getResult(I iface, broadcastBySubSid_args args) throws org.apache.thrift.TException {
        broadcastBySubSid_result result = new broadcastBySubSid_result();
        result.success = iface.broadcastBySubSid(args.SvcType, args.topSid, args.uid, args.reqId, args.subSid, args.bcTypeId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class broadcastBySubSidExceptUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastBySubSidExceptUid_args> {
      public broadcastBySubSidExceptUid() {
        super("broadcastBySubSidExceptUid");
      }

      public broadcastBySubSidExceptUid_args getEmptyArgsInstance() {
        return new broadcastBySubSidExceptUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public broadcastBySubSidExceptUid_result getResult(I iface, broadcastBySubSidExceptUid_args args) throws org.apache.thrift.TException {
        broadcastBySubSidExceptUid_result result = new broadcastBySubSidExceptUid_result();
        result.success = iface.broadcastBySubSidExceptUid(args.SvcType, args.topSid, args.uid, args.reqId, args.subSid, args.bcTypeId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multicastByUidSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multicastByUidSet_args> {
      public multicastByUidSet() {
        super("multicastByUidSet");
      }

      public multicastByUidSet_args getEmptyArgsInstance() {
        return new multicastByUidSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multicastByUidSet_result getResult(I iface, multicastByUidSet_args args) throws org.apache.thrift.TException {
        multicastByUidSet_result result = new multicastByUidSet_result();
        result.success = iface.multicastByUidSet(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.uidSet, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class unicastToClient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unicastToClient_args> {
      public unicastToClient() {
        super("unicastToClient");
      }

      public unicastToClient_args getEmptyArgsInstance() {
        return new unicastToClient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unicastToClient_result getResult(I iface, unicastToClient_args args) throws org.apache.thrift.TException {
        unicastToClient_result result = new unicastToClient_result();
        result.success = iface.unicastToClient(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multicastToClient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multicastToClient_args> {
      public multicastToClient() {
        super("multicastToClient");
      }

      public multicastToClient_args getEmptyArgsInstance() {
        return new multicastToClient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public multicastToClient_result getResult(I iface, multicastToClient_args args) throws org.apache.thrift.TException {
        multicastToClient_result result = new multicastToClient_result();
        result.success = iface.multicastToClient(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.uidSet, args.groupId, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class broadcastByUserGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastByUserGroupId_args> {
      public broadcastByUserGroupId() {
        super("broadcastByUserGroupId");
      }

      public broadcastByUserGroupId_args getEmptyArgsInstance() {
        return new broadcastByUserGroupId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public broadcastByUserGroupId_result getResult(I iface, broadcastByUserGroupId_args args) throws org.apache.thrift.TException {
        broadcastByUserGroupId_result result = new broadcastByUserGroupId_result();
        result.success = iface.broadcastByUserGroupId(args.SvcType, args.topSid, args.uid, args.reqId, args.rUserGroupId, args.data, args.size, args.priority);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pingSaaSrv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pingSaaSrv_args> {
      public pingSaaSrv() {
        super("pingSaaSrv");
      }

      public pingSaaSrv_args getEmptyArgsInstance() {
        return new pingSaaSrv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pingSaaSrv_result getResult(I iface, pingSaaSrv_args args) throws org.apache.thrift.TException {
        pingSaaSrv_result result = new pingSaaSrv_result();
        result.success = iface.pingSaaSrv(args.now);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("broadcastByTopSid", new broadcastByTopSid());
      processMap.put("broadcastByTopSidExceptUid", new broadcastByTopSidExceptUid());
      processMap.put("broadcastBySubSid", new broadcastBySubSid());
      processMap.put("broadcastBySubSidExceptUid", new broadcastBySubSidExceptUid());
      processMap.put("multicastByUidSet", new multicastByUidSet());
      processMap.put("unicastToClient", new unicastToClient());
      processMap.put("multicastToClient", new multicastToClient());
      processMap.put("broadcastByUserGroupId", new broadcastByUserGroupId());
      processMap.put("pingSaaSrv", new pingSaaSrv());
      return processMap;
    }

    public static class broadcastByTopSid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastByTopSid_args, java.lang.Integer> {
      public broadcastByTopSid() {
        super("broadcastByTopSid");
      }

      public broadcastByTopSid_args getEmptyArgsInstance() {
        return new broadcastByTopSid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            broadcastByTopSid_result result = new broadcastByTopSid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            broadcastByTopSid_result result = new broadcastByTopSid_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, broadcastByTopSid_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastByTopSid(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data,resultHandler);
      }
    }

    public static class broadcastByTopSidExceptUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastByTopSidExceptUid_args, java.lang.Integer> {
      public broadcastByTopSidExceptUid() {
        super("broadcastByTopSidExceptUid");
      }

      public broadcastByTopSidExceptUid_args getEmptyArgsInstance() {
        return new broadcastByTopSidExceptUid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            broadcastByTopSidExceptUid_result result = new broadcastByTopSidExceptUid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            broadcastByTopSidExceptUid_result result = new broadcastByTopSidExceptUid_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, broadcastByTopSidExceptUid_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastByTopSidExceptUid(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data,resultHandler);
      }
    }

    public static class broadcastBySubSid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastBySubSid_args, java.lang.Integer> {
      public broadcastBySubSid() {
        super("broadcastBySubSid");
      }

      public broadcastBySubSid_args getEmptyArgsInstance() {
        return new broadcastBySubSid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            broadcastBySubSid_result result = new broadcastBySubSid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            broadcastBySubSid_result result = new broadcastBySubSid_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, broadcastBySubSid_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastBySubSid(args.SvcType, args.topSid, args.uid, args.reqId, args.subSid, args.bcTypeId, args.data,resultHandler);
      }
    }

    public static class broadcastBySubSidExceptUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastBySubSidExceptUid_args, java.lang.Integer> {
      public broadcastBySubSidExceptUid() {
        super("broadcastBySubSidExceptUid");
      }

      public broadcastBySubSidExceptUid_args getEmptyArgsInstance() {
        return new broadcastBySubSidExceptUid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            broadcastBySubSidExceptUid_result result = new broadcastBySubSidExceptUid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            broadcastBySubSidExceptUid_result result = new broadcastBySubSidExceptUid_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, broadcastBySubSidExceptUid_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastBySubSidExceptUid(args.SvcType, args.topSid, args.uid, args.reqId, args.subSid, args.bcTypeId, args.data,resultHandler);
      }
    }

    public static class multicastByUidSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multicastByUidSet_args, java.lang.Integer> {
      public multicastByUidSet() {
        super("multicastByUidSet");
      }

      public multicastByUidSet_args getEmptyArgsInstance() {
        return new multicastByUidSet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            multicastByUidSet_result result = new multicastByUidSet_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multicastByUidSet_result result = new multicastByUidSet_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multicastByUidSet_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.multicastByUidSet(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.uidSet, args.data,resultHandler);
      }
    }

    public static class unicastToClient<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unicastToClient_args, java.lang.Integer> {
      public unicastToClient() {
        super("unicastToClient");
      }

      public unicastToClient_args getEmptyArgsInstance() {
        return new unicastToClient_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            unicastToClient_result result = new unicastToClient_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            unicastToClient_result result = new unicastToClient_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unicastToClient_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.unicastToClient(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.data,resultHandler);
      }
    }

    public static class multicastToClient<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multicastToClient_args, java.lang.Integer> {
      public multicastToClient() {
        super("multicastToClient");
      }

      public multicastToClient_args getEmptyArgsInstance() {
        return new multicastToClient_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            multicastToClient_result result = new multicastToClient_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multicastToClient_result result = new multicastToClient_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multicastToClient_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.multicastToClient(args.SvcType, args.topSid, args.uid, args.reqId, args.bcTypeId, args.uidSet, args.groupId, args.data,resultHandler);
      }
    }

    public static class broadcastByUserGroupId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastByUserGroupId_args, java.lang.Integer> {
      public broadcastByUserGroupId() {
        super("broadcastByUserGroupId");
      }

      public broadcastByUserGroupId_args getEmptyArgsInstance() {
        return new broadcastByUserGroupId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            broadcastByUserGroupId_result result = new broadcastByUserGroupId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            broadcastByUserGroupId_result result = new broadcastByUserGroupId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, broadcastByUserGroupId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastByUserGroupId(args.SvcType, args.topSid, args.uid, args.reqId, args.rUserGroupId, args.data, args.size, args.priority,resultHandler);
      }
    }

    public static class pingSaaSrv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pingSaaSrv_args, java.lang.Long> {
      public pingSaaSrv() {
        super("pingSaaSrv");
      }

      public pingSaaSrv_args getEmptyArgsInstance() {
        return new pingSaaSrv_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            pingSaaSrv_result result = new pingSaaSrv_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pingSaaSrv_result result = new pingSaaSrv_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pingSaaSrv_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.pingSaaSrv(args.now,resultHandler);
      }
    }

  }

  public static class broadcastByTopSid_args implements org.apache.thrift.TBase<broadcastByTopSid_args, broadcastByTopSid_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByTopSid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByTopSid_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByTopSid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByTopSid_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public int bcTypeId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      DATA((short)11, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __BCTYPEID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByTopSid_args.class, metaDataMap);
    }

    public broadcastByTopSid_args() {
    }

    public broadcastByTopSid_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      int bcTypeId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByTopSid_args(broadcastByTopSid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.bcTypeId = other.bcTypeId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public broadcastByTopSid_args deepCopy() {
      return new broadcastByTopSid_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public broadcastByTopSid_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public broadcastByTopSid_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public broadcastByTopSid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public broadcastByTopSid_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public broadcastByTopSid_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public broadcastByTopSid_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case BC_TYPE_ID:
        return getBcTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByTopSid_args)
        return this.equals((broadcastByTopSid_args)that);
      return false;
    }

    public boolean equals(broadcastByTopSid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByTopSid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByTopSid_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByTopSid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSid_argsStandardScheme getScheme() {
        return new broadcastByTopSid_argsStandardScheme();
      }
    }

    private static class broadcastByTopSid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByTopSid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByTopSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByTopSid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByTopSid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSid_argsTupleScheme getScheme() {
        return new broadcastByTopSid_argsTupleScheme();
      }
    }

    private static class broadcastByTopSid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByTopSid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(4);
        }
        if (struct.isSetData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastByTopSid_result implements org.apache.thrift.TBase<broadcastByTopSid_result, broadcastByTopSid_result._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByTopSid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByTopSid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByTopSid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByTopSid_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByTopSid_result.class, metaDataMap);
    }

    public broadcastByTopSid_result() {
    }

    public broadcastByTopSid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByTopSid_result(broadcastByTopSid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public broadcastByTopSid_result deepCopy() {
      return new broadcastByTopSid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public broadcastByTopSid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByTopSid_result)
        return this.equals((broadcastByTopSid_result)that);
      return false;
    }

    public boolean equals(broadcastByTopSid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByTopSid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByTopSid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByTopSid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSid_resultStandardScheme getScheme() {
        return new broadcastByTopSid_resultStandardScheme();
      }
    }

    private static class broadcastByTopSid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByTopSid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByTopSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByTopSid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByTopSid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSid_resultTupleScheme getScheme() {
        return new broadcastByTopSid_resultTupleScheme();
      }
    }

    private static class broadcastByTopSid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByTopSid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastByTopSidExceptUid_args implements org.apache.thrift.TBase<broadcastByTopSidExceptUid_args, broadcastByTopSidExceptUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByTopSidExceptUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByTopSidExceptUid_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByTopSidExceptUid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByTopSidExceptUid_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public int bcTypeId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      DATA((short)11, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __BCTYPEID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByTopSidExceptUid_args.class, metaDataMap);
    }

    public broadcastByTopSidExceptUid_args() {
    }

    public broadcastByTopSidExceptUid_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      int bcTypeId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByTopSidExceptUid_args(broadcastByTopSidExceptUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.bcTypeId = other.bcTypeId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public broadcastByTopSidExceptUid_args deepCopy() {
      return new broadcastByTopSidExceptUid_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public broadcastByTopSidExceptUid_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public broadcastByTopSidExceptUid_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public broadcastByTopSidExceptUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public broadcastByTopSidExceptUid_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public broadcastByTopSidExceptUid_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public broadcastByTopSidExceptUid_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case BC_TYPE_ID:
        return getBcTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByTopSidExceptUid_args)
        return this.equals((broadcastByTopSidExceptUid_args)that);
      return false;
    }

    public boolean equals(broadcastByTopSidExceptUid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByTopSidExceptUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByTopSidExceptUid_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByTopSidExceptUid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSidExceptUid_argsStandardScheme getScheme() {
        return new broadcastByTopSidExceptUid_argsStandardScheme();
      }
    }

    private static class broadcastByTopSidExceptUid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByTopSidExceptUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByTopSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByTopSidExceptUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByTopSidExceptUid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSidExceptUid_argsTupleScheme getScheme() {
        return new broadcastByTopSidExceptUid_argsTupleScheme();
      }
    }

    private static class broadcastByTopSidExceptUid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByTopSidExceptUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(4);
        }
        if (struct.isSetData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastByTopSidExceptUid_result implements org.apache.thrift.TBase<broadcastByTopSidExceptUid_result, broadcastByTopSidExceptUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByTopSidExceptUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByTopSidExceptUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByTopSidExceptUid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByTopSidExceptUid_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByTopSidExceptUid_result.class, metaDataMap);
    }

    public broadcastByTopSidExceptUid_result() {
    }

    public broadcastByTopSidExceptUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByTopSidExceptUid_result(broadcastByTopSidExceptUid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public broadcastByTopSidExceptUid_result deepCopy() {
      return new broadcastByTopSidExceptUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public broadcastByTopSidExceptUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByTopSidExceptUid_result)
        return this.equals((broadcastByTopSidExceptUid_result)that);
      return false;
    }

    public boolean equals(broadcastByTopSidExceptUid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByTopSidExceptUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByTopSidExceptUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByTopSidExceptUid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSidExceptUid_resultStandardScheme getScheme() {
        return new broadcastByTopSidExceptUid_resultStandardScheme();
      }
    }

    private static class broadcastByTopSidExceptUid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByTopSidExceptUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByTopSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByTopSidExceptUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByTopSidExceptUid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByTopSidExceptUid_resultTupleScheme getScheme() {
        return new broadcastByTopSidExceptUid_resultTupleScheme();
      }
    }

    private static class broadcastByTopSidExceptUid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByTopSidExceptUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByTopSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastBySubSid_args implements org.apache.thrift.TBase<broadcastBySubSid_args, broadcastBySubSid_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastBySubSid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastBySubSid_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SUB_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("subSid", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastBySubSid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastBySubSid_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public long subSid; // required
    public int bcTypeId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      SUB_SID((short)5, "subSid"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      DATA((short)11, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 5: // SUB_SID
            return SUB_SID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __SUBSID_ISSET_ID = 3;
    private static final int __BCTYPEID_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_SID, new org.apache.thrift.meta_data.FieldMetaData("subSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastBySubSid_args.class, metaDataMap);
    }

    public broadcastBySubSid_args() {
    }

    public broadcastBySubSid_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      long subSid,
      int bcTypeId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.subSid = subSid;
      setSubSidIsSet(true);
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastBySubSid_args(broadcastBySubSid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.subSid = other.subSid;
      this.bcTypeId = other.bcTypeId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public broadcastBySubSid_args deepCopy() {
      return new broadcastBySubSid_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setSubSidIsSet(false);
      this.subSid = 0;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public broadcastBySubSid_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public broadcastBySubSid_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public broadcastBySubSid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public broadcastBySubSid_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public long getSubSid() {
      return this.subSid;
    }

    public broadcastBySubSid_args setSubSid(long subSid) {
      this.subSid = subSid;
      setSubSidIsSet(true);
      return this;
    }

    public void unsetSubSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBSID_ISSET_ID);
    }

    /** Returns true if field subSid is set (has been assigned a value) and false otherwise */
    public boolean isSetSubSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBSID_ISSET_ID);
    }

    public void setSubSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBSID_ISSET_ID, value);
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public broadcastBySubSid_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public broadcastBySubSid_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case SUB_SID:
        if (value == null) {
          unsetSubSid();
        } else {
          setSubSid((java.lang.Long)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case SUB_SID:
        return getSubSid();

      case BC_TYPE_ID:
        return getBcTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case SUB_SID:
        return isSetSubSid();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastBySubSid_args)
        return this.equals((broadcastBySubSid_args)that);
      return false;
    }

    public boolean equals(broadcastBySubSid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_subSid = true;
      boolean that_present_subSid = true;
      if (this_present_subSid || that_present_subSid) {
        if (!(this_present_subSid && that_present_subSid))
          return false;
        if (this.subSid != that.subSid)
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(subSid);

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(broadcastBySubSid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubSid()).compareTo(other.isSetSubSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subSid, other.subSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastBySubSid_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subSid:");
      sb.append(this.subSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastBySubSid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSid_argsStandardScheme getScheme() {
        return new broadcastBySubSid_argsStandardScheme();
      }
    }

    private static class broadcastBySubSid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastBySubSid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastBySubSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUB_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subSid = iprot.readI64();
                struct.setSubSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastBySubSid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_SID_FIELD_DESC);
        oprot.writeI64(struct.subSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastBySubSid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSid_argsTupleScheme getScheme() {
        return new broadcastBySubSid_argsTupleScheme();
      }
    }

    private static class broadcastBySubSid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastBySubSid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetSubSid()) {
          optionals.set(4);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(5);
        }
        if (struct.isSetData()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetSubSid()) {
          oprot.writeI64(struct.subSid);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.subSid = iprot.readI64();
          struct.setSubSidIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastBySubSid_result implements org.apache.thrift.TBase<broadcastBySubSid_result, broadcastBySubSid_result._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastBySubSid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastBySubSid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastBySubSid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastBySubSid_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastBySubSid_result.class, metaDataMap);
    }

    public broadcastBySubSid_result() {
    }

    public broadcastBySubSid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastBySubSid_result(broadcastBySubSid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public broadcastBySubSid_result deepCopy() {
      return new broadcastBySubSid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public broadcastBySubSid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastBySubSid_result)
        return this.equals((broadcastBySubSid_result)that);
      return false;
    }

    public boolean equals(broadcastBySubSid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastBySubSid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastBySubSid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastBySubSid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSid_resultStandardScheme getScheme() {
        return new broadcastBySubSid_resultStandardScheme();
      }
    }

    private static class broadcastBySubSid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastBySubSid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastBySubSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastBySubSid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastBySubSid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSid_resultTupleScheme getScheme() {
        return new broadcastBySubSid_resultTupleScheme();
      }
    }

    private static class broadcastBySubSid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastBySubSid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastBySubSidExceptUid_args implements org.apache.thrift.TBase<broadcastBySubSidExceptUid_args, broadcastBySubSidExceptUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastBySubSidExceptUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastBySubSidExceptUid_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SUB_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("subSid", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastBySubSidExceptUid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastBySubSidExceptUid_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public long subSid; // required
    public int bcTypeId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      SUB_SID((short)5, "subSid"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      DATA((short)11, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 5: // SUB_SID
            return SUB_SID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __SUBSID_ISSET_ID = 3;
    private static final int __BCTYPEID_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUB_SID, new org.apache.thrift.meta_data.FieldMetaData("subSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastBySubSidExceptUid_args.class, metaDataMap);
    }

    public broadcastBySubSidExceptUid_args() {
    }

    public broadcastBySubSidExceptUid_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      long subSid,
      int bcTypeId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.subSid = subSid;
      setSubSidIsSet(true);
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastBySubSidExceptUid_args(broadcastBySubSidExceptUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.subSid = other.subSid;
      this.bcTypeId = other.bcTypeId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public broadcastBySubSidExceptUid_args deepCopy() {
      return new broadcastBySubSidExceptUid_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setSubSidIsSet(false);
      this.subSid = 0;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public broadcastBySubSidExceptUid_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public broadcastBySubSidExceptUid_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public broadcastBySubSidExceptUid_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public broadcastBySubSidExceptUid_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public long getSubSid() {
      return this.subSid;
    }

    public broadcastBySubSidExceptUid_args setSubSid(long subSid) {
      this.subSid = subSid;
      setSubSidIsSet(true);
      return this;
    }

    public void unsetSubSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBSID_ISSET_ID);
    }

    /** Returns true if field subSid is set (has been assigned a value) and false otherwise */
    public boolean isSetSubSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBSID_ISSET_ID);
    }

    public void setSubSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBSID_ISSET_ID, value);
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public broadcastBySubSidExceptUid_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public broadcastBySubSidExceptUid_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case SUB_SID:
        if (value == null) {
          unsetSubSid();
        } else {
          setSubSid((java.lang.Long)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case SUB_SID:
        return getSubSid();

      case BC_TYPE_ID:
        return getBcTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case SUB_SID:
        return isSetSubSid();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastBySubSidExceptUid_args)
        return this.equals((broadcastBySubSidExceptUid_args)that);
      return false;
    }

    public boolean equals(broadcastBySubSidExceptUid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_subSid = true;
      boolean that_present_subSid = true;
      if (this_present_subSid || that_present_subSid) {
        if (!(this_present_subSid && that_present_subSid))
          return false;
        if (this.subSid != that.subSid)
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(subSid);

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(broadcastBySubSidExceptUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubSid()).compareTo(other.isSetSubSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subSid, other.subSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastBySubSidExceptUid_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subSid:");
      sb.append(this.subSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastBySubSidExceptUid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSidExceptUid_argsStandardScheme getScheme() {
        return new broadcastBySubSidExceptUid_argsStandardScheme();
      }
    }

    private static class broadcastBySubSidExceptUid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastBySubSidExceptUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastBySubSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUB_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subSid = iprot.readI64();
                struct.setSubSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastBySubSidExceptUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_SID_FIELD_DESC);
        oprot.writeI64(struct.subSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastBySubSidExceptUid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSidExceptUid_argsTupleScheme getScheme() {
        return new broadcastBySubSidExceptUid_argsTupleScheme();
      }
    }

    private static class broadcastBySubSidExceptUid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastBySubSidExceptUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetSubSid()) {
          optionals.set(4);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(5);
        }
        if (struct.isSetData()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetSubSid()) {
          oprot.writeI64(struct.subSid);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSidExceptUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.subSid = iprot.readI64();
          struct.setSubSidIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastBySubSidExceptUid_result implements org.apache.thrift.TBase<broadcastBySubSidExceptUid_result, broadcastBySubSidExceptUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastBySubSidExceptUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastBySubSidExceptUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastBySubSidExceptUid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastBySubSidExceptUid_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastBySubSidExceptUid_result.class, metaDataMap);
    }

    public broadcastBySubSidExceptUid_result() {
    }

    public broadcastBySubSidExceptUid_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastBySubSidExceptUid_result(broadcastBySubSidExceptUid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public broadcastBySubSidExceptUid_result deepCopy() {
      return new broadcastBySubSidExceptUid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public broadcastBySubSidExceptUid_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastBySubSidExceptUid_result)
        return this.equals((broadcastBySubSidExceptUid_result)that);
      return false;
    }

    public boolean equals(broadcastBySubSidExceptUid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastBySubSidExceptUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastBySubSidExceptUid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastBySubSidExceptUid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSidExceptUid_resultStandardScheme getScheme() {
        return new broadcastBySubSidExceptUid_resultStandardScheme();
      }
    }

    private static class broadcastBySubSidExceptUid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastBySubSidExceptUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastBySubSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastBySubSidExceptUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastBySubSidExceptUid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastBySubSidExceptUid_resultTupleScheme getScheme() {
        return new broadcastBySubSidExceptUid_resultTupleScheme();
      }
    }

    private static class broadcastBySubSidExceptUid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastBySubSidExceptUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastBySubSidExceptUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multicastByUidSet_args implements org.apache.thrift.TBase<multicastByUidSet_args, multicastByUidSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<multicastByUidSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multicastByUidSet_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField UID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("uidSet", org.apache.thrift.protocol.TType.SET, (short)11);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multicastByUidSet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multicastByUidSet_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public int bcTypeId; // required
    public java.util.Set<java.lang.Long> uidSet; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      UID_SET((short)11, "uidSet"),
      DATA((short)12, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // UID_SET
            return UID_SET;
          case 12: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __BCTYPEID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UID_SET, new org.apache.thrift.meta_data.FieldMetaData("uidSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multicastByUidSet_args.class, metaDataMap);
    }

    public multicastByUidSet_args() {
    }

    public multicastByUidSet_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      int bcTypeId,
      java.util.Set<java.lang.Long> uidSet,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.uidSet = uidSet;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multicastByUidSet_args(multicastByUidSet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.bcTypeId = other.bcTypeId;
      if (other.isSetUidSet()) {
        java.util.Set<java.lang.Long> __this__uidSet = new java.util.HashSet<java.lang.Long>(other.uidSet);
        this.uidSet = __this__uidSet;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public multicastByUidSet_args deepCopy() {
      return new multicastByUidSet_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.uidSet = null;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public multicastByUidSet_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public multicastByUidSet_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public multicastByUidSet_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public multicastByUidSet_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public multicastByUidSet_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public int getUidSetSize() {
      return (this.uidSet == null) ? 0 : this.uidSet.size();
    }

    public java.util.Iterator<java.lang.Long> getUidSetIterator() {
      return (this.uidSet == null) ? null : this.uidSet.iterator();
    }

    public void addToUidSet(long elem) {
      if (this.uidSet == null) {
        this.uidSet = new java.util.HashSet<java.lang.Long>();
      }
      this.uidSet.add(elem);
    }

    public java.util.Set<java.lang.Long> getUidSet() {
      return this.uidSet;
    }

    public multicastByUidSet_args setUidSet(java.util.Set<java.lang.Long> uidSet) {
      this.uidSet = uidSet;
      return this;
    }

    public void unsetUidSet() {
      this.uidSet = null;
    }

    /** Returns true if field uidSet is set (has been assigned a value) and false otherwise */
    public boolean isSetUidSet() {
      return this.uidSet != null;
    }

    public void setUidSetIsSet(boolean value) {
      if (!value) {
        this.uidSet = null;
      }
    }

    public java.lang.String getData() {
      return this.data;
    }

    public multicastByUidSet_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case UID_SET:
        if (value == null) {
          unsetUidSet();
        } else {
          setUidSet((java.util.Set<java.lang.Long>)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case BC_TYPE_ID:
        return getBcTypeId();

      case UID_SET:
        return getUidSet();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case UID_SET:
        return isSetUidSet();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multicastByUidSet_args)
        return this.equals((multicastByUidSet_args)that);
      return false;
    }

    public boolean equals(multicastByUidSet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_uidSet = true && this.isSetUidSet();
      boolean that_present_uidSet = true && that.isSetUidSet();
      if (this_present_uidSet || that_present_uidSet) {
        if (!(this_present_uidSet && that_present_uidSet))
          return false;
        if (!this.uidSet.equals(that.uidSet))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetUidSet()) ? 131071 : 524287);
      if (isSetUidSet())
        hashCode = hashCode * 8191 + uidSet.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multicastByUidSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUidSet()).compareTo(other.isSetUidSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUidSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidSet, other.uidSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multicastByUidSet_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uidSet:");
      if (this.uidSet == null) {
        sb.append("null");
      } else {
        sb.append(this.uidSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multicastByUidSet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastByUidSet_argsStandardScheme getScheme() {
        return new multicastByUidSet_argsStandardScheme();
      }
    }

    private static class multicastByUidSet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multicastByUidSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multicastByUidSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // UID_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.uidSet = new java.util.HashSet<java.lang.Long>(2*_set0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.uidSet.add(_elem1);
                  }
                  iprot.readSetEnd();
                }
                struct.setUidSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multicastByUidSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.uidSet != null) {
          oprot.writeFieldBegin(UID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.uidSet.size()));
            for (long _iter3 : struct.uidSet)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multicastByUidSet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastByUidSet_argsTupleScheme getScheme() {
        return new multicastByUidSet_argsTupleScheme();
      }
    }

    private static class multicastByUidSet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multicastByUidSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multicastByUidSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(4);
        }
        if (struct.isSetUidSet()) {
          optionals.set(5);
        }
        if (struct.isSetData()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetUidSet()) {
          {
            oprot.writeI32(struct.uidSet.size());
            for (long _iter4 : struct.uidSet)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multicastByUidSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uidSet = new java.util.HashSet<java.lang.Long>(2*_set5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _set5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.uidSet.add(_elem6);
            }
          }
          struct.setUidSetIsSet(true);
        }
        if (incoming.get(6)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multicastByUidSet_result implements org.apache.thrift.TBase<multicastByUidSet_result, multicastByUidSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<multicastByUidSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multicastByUidSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multicastByUidSet_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multicastByUidSet_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multicastByUidSet_result.class, metaDataMap);
    }

    public multicastByUidSet_result() {
    }

    public multicastByUidSet_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multicastByUidSet_result(multicastByUidSet_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multicastByUidSet_result deepCopy() {
      return new multicastByUidSet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multicastByUidSet_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multicastByUidSet_result)
        return this.equals((multicastByUidSet_result)that);
      return false;
    }

    public boolean equals(multicastByUidSet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(multicastByUidSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multicastByUidSet_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multicastByUidSet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastByUidSet_resultStandardScheme getScheme() {
        return new multicastByUidSet_resultStandardScheme();
      }
    }

    private static class multicastByUidSet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multicastByUidSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multicastByUidSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multicastByUidSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multicastByUidSet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastByUidSet_resultTupleScheme getScheme() {
        return new multicastByUidSet_resultTupleScheme();
      }
    }

    private static class multicastByUidSet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multicastByUidSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multicastByUidSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multicastByUidSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unicastToClient_args implements org.apache.thrift.TBase<unicastToClient_args, unicastToClient_args._Fields>, java.io.Serializable, Cloneable, Comparable<unicastToClient_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unicastToClient_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unicastToClient_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unicastToClient_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public int bcTypeId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      DATA((short)11, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __BCTYPEID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unicastToClient_args.class, metaDataMap);
    }

    public unicastToClient_args() {
    }

    public unicastToClient_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      int bcTypeId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unicastToClient_args(unicastToClient_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.bcTypeId = other.bcTypeId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public unicastToClient_args deepCopy() {
      return new unicastToClient_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public unicastToClient_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public unicastToClient_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public unicastToClient_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public unicastToClient_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public unicastToClient_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public unicastToClient_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case BC_TYPE_ID:
        return getBcTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof unicastToClient_args)
        return this.equals((unicastToClient_args)that);
      return false;
    }

    public boolean equals(unicastToClient_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(unicastToClient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unicastToClient_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unicastToClient_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unicastToClient_argsStandardScheme getScheme() {
        return new unicastToClient_argsStandardScheme();
      }
    }

    private static class unicastToClient_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<unicastToClient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unicastToClient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unicastToClient_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unicastToClient_argsTupleScheme getScheme() {
        return new unicastToClient_argsTupleScheme();
      }
    }

    private static class unicastToClient_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<unicastToClient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(4);
        }
        if (struct.isSetData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unicastToClient_result implements org.apache.thrift.TBase<unicastToClient_result, unicastToClient_result._Fields>, java.io.Serializable, Cloneable, Comparable<unicastToClient_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unicastToClient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unicastToClient_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unicastToClient_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unicastToClient_result.class, metaDataMap);
    }

    public unicastToClient_result() {
    }

    public unicastToClient_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unicastToClient_result(unicastToClient_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public unicastToClient_result deepCopy() {
      return new unicastToClient_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public unicastToClient_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof unicastToClient_result)
        return this.equals((unicastToClient_result)that);
      return false;
    }

    public boolean equals(unicastToClient_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(unicastToClient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unicastToClient_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unicastToClient_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unicastToClient_resultStandardScheme getScheme() {
        return new unicastToClient_resultStandardScheme();
      }
    }

    private static class unicastToClient_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<unicastToClient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unicastToClient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unicastToClient_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unicastToClient_resultTupleScheme getScheme() {
        return new unicastToClient_resultTupleScheme();
      }
    }

    private static class unicastToClient_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<unicastToClient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multicastToClient_args implements org.apache.thrift.TBase<multicastToClient_args, multicastToClient_args._Fields>, java.io.Serializable, Cloneable, Comparable<multicastToClient_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multicastToClient_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BC_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bcTypeId", org.apache.thrift.protocol.TType.I32, (short)10);
    private static final org.apache.thrift.protocol.TField UID_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("uidSet", org.apache.thrift.protocol.TType.SET, (short)11);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)12);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multicastToClient_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multicastToClient_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public int bcTypeId; // required
    public java.util.Set<java.lang.Long> uidSet; // required
    public long groupId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      BC_TYPE_ID((short)10, "bcTypeId"),
      UID_SET((short)11, "uidSet"),
      GROUP_ID((short)12, "groupId"),
      DATA((short)13, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 10: // BC_TYPE_ID
            return BC_TYPE_ID;
          case 11: // UID_SET
            return UID_SET;
          case 12: // GROUP_ID
            return GROUP_ID;
          case 13: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __BCTYPEID_ISSET_ID = 3;
    private static final int __GROUPID_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BC_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("bcTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UID_SET, new org.apache.thrift.meta_data.FieldMetaData("uidSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multicastToClient_args.class, metaDataMap);
    }

    public multicastToClient_args() {
    }

    public multicastToClient_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      int bcTypeId,
      java.util.Set<java.lang.Long> uidSet,
      long groupId,
      java.lang.String data)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      this.uidSet = uidSet;
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multicastToClient_args(multicastToClient_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.bcTypeId = other.bcTypeId;
      if (other.isSetUidSet()) {
        java.util.Set<java.lang.Long> __this__uidSet = new java.util.HashSet<java.lang.Long>(other.uidSet);
        this.uidSet = __this__uidSet;
      }
      this.groupId = other.groupId;
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public multicastToClient_args deepCopy() {
      return new multicastToClient_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      setBcTypeIdIsSet(false);
      this.bcTypeId = 0;
      this.uidSet = null;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.data = null;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public multicastToClient_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public multicastToClient_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public multicastToClient_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public multicastToClient_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBcTypeId() {
      return this.bcTypeId;
    }

    public multicastToClient_args setBcTypeId(int bcTypeId) {
      this.bcTypeId = bcTypeId;
      setBcTypeIdIsSet(true);
      return this;
    }

    public void unsetBcTypeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    /** Returns true if field bcTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetBcTypeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BCTYPEID_ISSET_ID);
    }

    public void setBcTypeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BCTYPEID_ISSET_ID, value);
    }

    public int getUidSetSize() {
      return (this.uidSet == null) ? 0 : this.uidSet.size();
    }

    public java.util.Iterator<java.lang.Long> getUidSetIterator() {
      return (this.uidSet == null) ? null : this.uidSet.iterator();
    }

    public void addToUidSet(long elem) {
      if (this.uidSet == null) {
        this.uidSet = new java.util.HashSet<java.lang.Long>();
      }
      this.uidSet.add(elem);
    }

    public java.util.Set<java.lang.Long> getUidSet() {
      return this.uidSet;
    }

    public multicastToClient_args setUidSet(java.util.Set<java.lang.Long> uidSet) {
      this.uidSet = uidSet;
      return this;
    }

    public void unsetUidSet() {
      this.uidSet = null;
    }

    /** Returns true if field uidSet is set (has been assigned a value) and false otherwise */
    public boolean isSetUidSet() {
      return this.uidSet != null;
    }

    public void setUidSetIsSet(boolean value) {
      if (!value) {
        this.uidSet = null;
      }
    }

    public long getGroupId() {
      return this.groupId;
    }

    public multicastToClient_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public java.lang.String getData() {
      return this.data;
    }

    public multicastToClient_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case BC_TYPE_ID:
        if (value == null) {
          unsetBcTypeId();
        } else {
          setBcTypeId((java.lang.Integer)value);
        }
        break;

      case UID_SET:
        if (value == null) {
          unsetUidSet();
        } else {
          setUidSet((java.util.Set<java.lang.Long>)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((java.lang.Long)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case BC_TYPE_ID:
        return getBcTypeId();

      case UID_SET:
        return getUidSet();

      case GROUP_ID:
        return getGroupId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case BC_TYPE_ID:
        return isSetBcTypeId();
      case UID_SET:
        return isSetUidSet();
      case GROUP_ID:
        return isSetGroupId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multicastToClient_args)
        return this.equals((multicastToClient_args)that);
      return false;
    }

    public boolean equals(multicastToClient_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_bcTypeId = true;
      boolean that_present_bcTypeId = true;
      if (this_present_bcTypeId || that_present_bcTypeId) {
        if (!(this_present_bcTypeId && that_present_bcTypeId))
          return false;
        if (this.bcTypeId != that.bcTypeId)
          return false;
      }

      boolean this_present_uidSet = true && this.isSetUidSet();
      boolean that_present_uidSet = true && that.isSetUidSet();
      if (this_present_uidSet || that_present_uidSet) {
        if (!(this_present_uidSet && that_present_uidSet))
          return false;
        if (!this.uidSet.equals(that.uidSet))
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + bcTypeId;

      hashCode = hashCode * 8191 + ((isSetUidSet()) ? 131071 : 524287);
      if (isSetUidSet())
        hashCode = hashCode * 8191 + uidSet.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(groupId);

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multicastToClient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBcTypeId()).compareTo(other.isSetBcTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBcTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bcTypeId, other.bcTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUidSet()).compareTo(other.isSetUidSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUidSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidSet, other.uidSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multicastToClient_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bcTypeId:");
      sb.append(this.bcTypeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uidSet:");
      if (this.uidSet == null) {
        sb.append("null");
      } else {
        sb.append(this.uidSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multicastToClient_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastToClient_argsStandardScheme getScheme() {
        return new multicastToClient_argsStandardScheme();
      }
    }

    private static class multicastToClient_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multicastToClient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // BC_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bcTypeId = iprot.readI32();
                struct.setBcTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // UID_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                  struct.uidSet = new java.util.HashSet<java.lang.Long>(2*_set8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.uidSet.add(_elem9);
                  }
                  iprot.readSetEnd();
                }
                struct.setUidSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multicastToClient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BC_TYPE_ID_FIELD_DESC);
        oprot.writeI32(struct.bcTypeId);
        oprot.writeFieldEnd();
        if (struct.uidSet != null) {
          oprot.writeFieldBegin(UID_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.uidSet.size()));
            for (long _iter11 : struct.uidSet)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multicastToClient_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastToClient_argsTupleScheme getScheme() {
        return new multicastToClient_argsTupleScheme();
      }
    }

    private static class multicastToClient_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multicastToClient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetBcTypeId()) {
          optionals.set(4);
        }
        if (struct.isSetUidSet()) {
          optionals.set(5);
        }
        if (struct.isSetGroupId()) {
          optionals.set(6);
        }
        if (struct.isSetData()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBcTypeId()) {
          oprot.writeI32(struct.bcTypeId);
        }
        if (struct.isSetUidSet()) {
          {
            oprot.writeI32(struct.uidSet.size());
            for (long _iter12 : struct.uidSet)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multicastToClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.bcTypeId = iprot.readI32();
          struct.setBcTypeIdIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uidSet = new java.util.HashSet<java.lang.Long>(2*_set13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _set13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.uidSet.add(_elem14);
            }
          }
          struct.setUidSetIsSet(true);
        }
        if (incoming.get(6)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multicastToClient_result implements org.apache.thrift.TBase<multicastToClient_result, multicastToClient_result._Fields>, java.io.Serializable, Cloneable, Comparable<multicastToClient_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multicastToClient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multicastToClient_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multicastToClient_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multicastToClient_result.class, metaDataMap);
    }

    public multicastToClient_result() {
    }

    public multicastToClient_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multicastToClient_result(multicastToClient_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multicastToClient_result deepCopy() {
      return new multicastToClient_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public multicastToClient_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multicastToClient_result)
        return this.equals((multicastToClient_result)that);
      return false;
    }

    public boolean equals(multicastToClient_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(multicastToClient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multicastToClient_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multicastToClient_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastToClient_resultStandardScheme getScheme() {
        return new multicastToClient_resultStandardScheme();
      }
    }

    private static class multicastToClient_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multicastToClient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multicastToClient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multicastToClient_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multicastToClient_resultTupleScheme getScheme() {
        return new multicastToClient_resultTupleScheme();
      }
    }

    private static class multicastToClient_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multicastToClient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multicastToClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastByUserGroupId_args implements org.apache.thrift.TBase<broadcastByUserGroupId_args, broadcastByUserGroupId_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByUserGroupId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByUserGroupId_args");

    private static final org.apache.thrift.protocol.TField SVC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SvcType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_SID_FIELD_DESC = new org.apache.thrift.protocol.TField("topSid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField R_USER_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rUserGroupId", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)12);
    private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I16, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByUserGroupId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByUserGroupId_argsTupleSchemeFactory();

    public int SvcType; // required
    public long topSid; // required
    public long uid; // required
    public java.lang.String reqId; // required
    public UserGroupIdType rUserGroupId; // required
    public java.lang.String data; // required
    public int size; // required
    public short priority; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SVC_TYPE((short)1, "SvcType"),
      TOP_SID((short)2, "topSid"),
      UID((short)3, "uid"),
      REQ_ID((short)4, "reqId"),
      R_USER_GROUP_ID((short)5, "rUserGroupId"),
      DATA((short)11, "data"),
      SIZE((short)12, "size"),
      PRIORITY((short)13, "priority");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SVC_TYPE
            return SVC_TYPE;
          case 2: // TOP_SID
            return TOP_SID;
          case 3: // UID
            return UID;
          case 4: // REQ_ID
            return REQ_ID;
          case 5: // R_USER_GROUP_ID
            return R_USER_GROUP_ID;
          case 11: // DATA
            return DATA;
          case 12: // SIZE
            return SIZE;
          case 13: // PRIORITY
            return PRIORITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SVCTYPE_ISSET_ID = 0;
    private static final int __TOPSID_ISSET_ID = 1;
    private static final int __UID_ISSET_ID = 2;
    private static final int __SIZE_ISSET_ID = 3;
    private static final int __PRIORITY_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SVC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SvcType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP_SID, new org.apache.thrift.meta_data.FieldMetaData("topSid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.R_USER_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("rUserGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserGroupIdType.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByUserGroupId_args.class, metaDataMap);
    }

    public broadcastByUserGroupId_args() {
    }

    public broadcastByUserGroupId_args(
      int SvcType,
      long topSid,
      long uid,
      java.lang.String reqId,
      UserGroupIdType rUserGroupId,
      java.lang.String data,
      int size,
      short priority)
    {
      this();
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      this.topSid = topSid;
      setTopSidIsSet(true);
      this.uid = uid;
      setUidIsSet(true);
      this.reqId = reqId;
      this.rUserGroupId = rUserGroupId;
      this.data = data;
      this.size = size;
      setSizeIsSet(true);
      this.priority = priority;
      setPriorityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByUserGroupId_args(broadcastByUserGroupId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.SvcType = other.SvcType;
      this.topSid = other.topSid;
      this.uid = other.uid;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetRUserGroupId()) {
        this.rUserGroupId = new UserGroupIdType(other.rUserGroupId);
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
      this.size = other.size;
      this.priority = other.priority;
    }

    public broadcastByUserGroupId_args deepCopy() {
      return new broadcastByUserGroupId_args(this);
    }

    @Override
    public void clear() {
      setSvcTypeIsSet(false);
      this.SvcType = 0;
      setTopSidIsSet(false);
      this.topSid = 0;
      setUidIsSet(false);
      this.uid = 0;
      this.reqId = null;
      this.rUserGroupId = null;
      this.data = null;
      setSizeIsSet(false);
      this.size = 0;
      setPriorityIsSet(false);
      this.priority = 0;
    }

    public int getSvcType() {
      return this.SvcType;
    }

    public broadcastByUserGroupId_args setSvcType(int SvcType) {
      this.SvcType = SvcType;
      setSvcTypeIsSet(true);
      return this;
    }

    public void unsetSvcType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    /** Returns true if field SvcType is set (has been assigned a value) and false otherwise */
    public boolean isSetSvcType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SVCTYPE_ISSET_ID);
    }

    public void setSvcTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SVCTYPE_ISSET_ID, value);
    }

    public long getTopSid() {
      return this.topSid;
    }

    public broadcastByUserGroupId_args setTopSid(long topSid) {
      this.topSid = topSid;
      setTopSidIsSet(true);
      return this;
    }

    public void unsetTopSid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    /** Returns true if field topSid is set (has been assigned a value) and false otherwise */
    public boolean isSetTopSid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPSID_ISSET_ID);
    }

    public void setTopSidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPSID_ISSET_ID, value);
    }

    public long getUid() {
      return this.uid;
    }

    public broadcastByUserGroupId_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public java.lang.String getReqId() {
      return this.reqId;
    }

    public broadcastByUserGroupId_args setReqId(java.lang.String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public UserGroupIdType getRUserGroupId() {
      return this.rUserGroupId;
    }

    public broadcastByUserGroupId_args setRUserGroupId(UserGroupIdType rUserGroupId) {
      this.rUserGroupId = rUserGroupId;
      return this;
    }

    public void unsetRUserGroupId() {
      this.rUserGroupId = null;
    }

    /** Returns true if field rUserGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetRUserGroupId() {
      return this.rUserGroupId != null;
    }

    public void setRUserGroupIdIsSet(boolean value) {
      if (!value) {
        this.rUserGroupId = null;
      }
    }

    public java.lang.String getData() {
      return this.data;
    }

    public broadcastByUserGroupId_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public int getSize() {
      return this.size;
    }

    public broadcastByUserGroupId_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public short getPriority() {
      return this.priority;
    }

    public broadcastByUserGroupId_args setPriority(short priority) {
      this.priority = priority;
      setPriorityIsSet(true);
      return this;
    }

    public void unsetPriority() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    /** Returns true if field priority is set (has been assigned a value) and false otherwise */
    public boolean isSetPriority() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
    }

    public void setPriorityIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SVC_TYPE:
        if (value == null) {
          unsetSvcType();
        } else {
          setSvcType((java.lang.Integer)value);
        }
        break;

      case TOP_SID:
        if (value == null) {
          unsetTopSid();
        } else {
          setTopSid((java.lang.Long)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.Long)value);
        }
        break;

      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((java.lang.String)value);
        }
        break;

      case R_USER_GROUP_ID:
        if (value == null) {
          unsetRUserGroupId();
        } else {
          setRUserGroupId((UserGroupIdType)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      case PRIORITY:
        if (value == null) {
          unsetPriority();
        } else {
          setPriority((java.lang.Short)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SVC_TYPE:
        return getSvcType();

      case TOP_SID:
        return getTopSid();

      case UID:
        return getUid();

      case REQ_ID:
        return getReqId();

      case R_USER_GROUP_ID:
        return getRUserGroupId();

      case DATA:
        return getData();

      case SIZE:
        return getSize();

      case PRIORITY:
        return getPriority();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SVC_TYPE:
        return isSetSvcType();
      case TOP_SID:
        return isSetTopSid();
      case UID:
        return isSetUid();
      case REQ_ID:
        return isSetReqId();
      case R_USER_GROUP_ID:
        return isSetRUserGroupId();
      case DATA:
        return isSetData();
      case SIZE:
        return isSetSize();
      case PRIORITY:
        return isSetPriority();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByUserGroupId_args)
        return this.equals((broadcastByUserGroupId_args)that);
      return false;
    }

    public boolean equals(broadcastByUserGroupId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_SvcType = true;
      boolean that_present_SvcType = true;
      if (this_present_SvcType || that_present_SvcType) {
        if (!(this_present_SvcType && that_present_SvcType))
          return false;
        if (this.SvcType != that.SvcType)
          return false;
      }

      boolean this_present_topSid = true;
      boolean that_present_topSid = true;
      if (this_present_topSid || that_present_topSid) {
        if (!(this_present_topSid && that_present_topSid))
          return false;
        if (this.topSid != that.topSid)
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_rUserGroupId = true && this.isSetRUserGroupId();
      boolean that_present_rUserGroupId = true && that.isSetRUserGroupId();
      if (this_present_rUserGroupId || that_present_rUserGroupId) {
        if (!(this_present_rUserGroupId && that_present_rUserGroupId))
          return false;
        if (!this.rUserGroupId.equals(that.rUserGroupId))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_priority = true;
      boolean that_present_priority = true;
      if (this_present_priority || that_present_priority) {
        if (!(this_present_priority && that_present_priority))
          return false;
        if (this.priority != that.priority)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + SvcType;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topSid);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

      hashCode = hashCode * 8191 + ((isSetReqId()) ? 131071 : 524287);
      if (isSetReqId())
        hashCode = hashCode * 8191 + reqId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRUserGroupId()) ? 131071 : 524287);
      if (isSetRUserGroupId())
        hashCode = hashCode * 8191 + rUserGroupId.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      hashCode = hashCode * 8191 + size;

      hashCode = hashCode * 8191 + priority;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByUserGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSvcType()).compareTo(other.isSetSvcType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvcType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SvcType, other.SvcType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopSid()).compareTo(other.isSetTopSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topSid, other.topSid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqId()).compareTo(other.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, other.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRUserGroupId()).compareTo(other.isSetRUserGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRUserGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rUserGroupId, other.rUserGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByUserGroupId_args(");
      boolean first = true;

      sb.append("SvcType:");
      sb.append(this.SvcType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topSid:");
      sb.append(this.topSid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rUserGroupId:");
      if (this.rUserGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.rUserGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rUserGroupId != null) {
        rUserGroupId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByUserGroupId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByUserGroupId_argsStandardScheme getScheme() {
        return new broadcastByUserGroupId_argsStandardScheme();
      }
    }

    private static class broadcastByUserGroupId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByUserGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByUserGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SVC_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.SvcType = iprot.readI32();
                struct.setSvcTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_SID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topSid = iprot.readI64();
                struct.setTopSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // R_USER_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rUserGroupId = new UserGroupIdType();
                struct.rUserGroupId.read(iprot);
                struct.setRUserGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.priority = iprot.readI16();
                struct.setPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByUserGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SVC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SvcType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_SID_FIELD_DESC);
        oprot.writeI64(struct.topSid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.rUserGroupId != null) {
          oprot.writeFieldBegin(R_USER_GROUP_ID_FIELD_DESC);
          struct.rUserGroupId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI16(struct.priority);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByUserGroupId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByUserGroupId_argsTupleScheme getScheme() {
        return new broadcastByUserGroupId_argsTupleScheme();
      }
    }

    private static class broadcastByUserGroupId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByUserGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByUserGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSvcType()) {
          optionals.set(0);
        }
        if (struct.isSetTopSid()) {
          optionals.set(1);
        }
        if (struct.isSetUid()) {
          optionals.set(2);
        }
        if (struct.isSetReqId()) {
          optionals.set(3);
        }
        if (struct.isSetRUserGroupId()) {
          optionals.set(4);
        }
        if (struct.isSetData()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        if (struct.isSetPriority()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSvcType()) {
          oprot.writeI32(struct.SvcType);
        }
        if (struct.isSetTopSid()) {
          oprot.writeI64(struct.topSid);
        }
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetRUserGroupId()) {
          struct.rUserGroupId.write(oprot);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetPriority()) {
          oprot.writeI16(struct.priority);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByUserGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.SvcType = iprot.readI32();
          struct.setSvcTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topSid = iprot.readI64();
          struct.setTopSidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.rUserGroupId = new UserGroupIdType();
          struct.rUserGroupId.read(iprot);
          struct.setRUserGroupIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.priority = iprot.readI16();
          struct.setPriorityIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastByUserGroupId_result implements org.apache.thrift.TBase<broadcastByUserGroupId_result, broadcastByUserGroupId_result._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastByUserGroupId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastByUserGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastByUserGroupId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastByUserGroupId_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastByUserGroupId_result.class, metaDataMap);
    }

    public broadcastByUserGroupId_result() {
    }

    public broadcastByUserGroupId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastByUserGroupId_result(broadcastByUserGroupId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public broadcastByUserGroupId_result deepCopy() {
      return new broadcastByUserGroupId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public broadcastByUserGroupId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof broadcastByUserGroupId_result)
        return this.equals((broadcastByUserGroupId_result)that);
      return false;
    }

    public boolean equals(broadcastByUserGroupId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(broadcastByUserGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("broadcastByUserGroupId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastByUserGroupId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByUserGroupId_resultStandardScheme getScheme() {
        return new broadcastByUserGroupId_resultStandardScheme();
      }
    }

    private static class broadcastByUserGroupId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastByUserGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastByUserGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastByUserGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastByUserGroupId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastByUserGroupId_resultTupleScheme getScheme() {
        return new broadcastByUserGroupId_resultTupleScheme();
      }
    }

    private static class broadcastByUserGroupId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastByUserGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastByUserGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastByUserGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pingSaaSrv_args implements org.apache.thrift.TBase<pingSaaSrv_args, pingSaaSrv_args._Fields>, java.io.Serializable, Cloneable, Comparable<pingSaaSrv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pingSaaSrv_args");

    private static final org.apache.thrift.protocol.TField NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("now", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pingSaaSrv_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pingSaaSrv_argsTupleSchemeFactory();

    public long now; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOW((short)1, "now");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOW
            return NOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOW_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOW, new org.apache.thrift.meta_data.FieldMetaData("now", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pingSaaSrv_args.class, metaDataMap);
    }

    public pingSaaSrv_args() {
    }

    public pingSaaSrv_args(
      long now)
    {
      this();
      this.now = now;
      setNowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pingSaaSrv_args(pingSaaSrv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.now = other.now;
    }

    public pingSaaSrv_args deepCopy() {
      return new pingSaaSrv_args(this);
    }

    @Override
    public void clear() {
      setNowIsSet(false);
      this.now = 0;
    }

    public long getNow() {
      return this.now;
    }

    public pingSaaSrv_args setNow(long now) {
      this.now = now;
      setNowIsSet(true);
      return this;
    }

    public void unsetNow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_ISSET_ID);
    }

    /** Returns true if field now is set (has been assigned a value) and false otherwise */
    public boolean isSetNow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_ISSET_ID);
    }

    public void setNowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOW:
        if (value == null) {
          unsetNow();
        } else {
          setNow((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOW:
        return getNow();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOW:
        return isSetNow();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pingSaaSrv_args)
        return this.equals((pingSaaSrv_args)that);
      return false;
    }

    public boolean equals(pingSaaSrv_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_now = true;
      boolean that_present_now = true;
      if (this_present_now || that_present_now) {
        if (!(this_present_now && that_present_now))
          return false;
        if (this.now != that.now)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now);

      return hashCode;
    }

    @Override
    public int compareTo(pingSaaSrv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNow()).compareTo(other.isSetNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now, other.now);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pingSaaSrv_args(");
      boolean first = true;

      sb.append("now:");
      sb.append(this.now);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pingSaaSrv_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pingSaaSrv_argsStandardScheme getScheme() {
        return new pingSaaSrv_argsStandardScheme();
      }
    }

    private static class pingSaaSrv_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pingSaaSrv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pingSaaSrv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.now = iprot.readI64();
                struct.setNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pingSaaSrv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOW_FIELD_DESC);
        oprot.writeI64(struct.now);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pingSaaSrv_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pingSaaSrv_argsTupleScheme getScheme() {
        return new pingSaaSrv_argsTupleScheme();
      }
    }

    private static class pingSaaSrv_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pingSaaSrv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pingSaaSrv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNow()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNow()) {
          oprot.writeI64(struct.now);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pingSaaSrv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.now = iprot.readI64();
          struct.setNowIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pingSaaSrv_result implements org.apache.thrift.TBase<pingSaaSrv_result, pingSaaSrv_result._Fields>, java.io.Serializable, Cloneable, Comparable<pingSaaSrv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pingSaaSrv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pingSaaSrv_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pingSaaSrv_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pingSaaSrv_result.class, metaDataMap);
    }

    public pingSaaSrv_result() {
    }

    public pingSaaSrv_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pingSaaSrv_result(pingSaaSrv_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public pingSaaSrv_result deepCopy() {
      return new pingSaaSrv_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public pingSaaSrv_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pingSaaSrv_result)
        return this.equals((pingSaaSrv_result)that);
      return false;
    }

    public boolean equals(pingSaaSrv_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(pingSaaSrv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pingSaaSrv_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pingSaaSrv_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pingSaaSrv_resultStandardScheme getScheme() {
        return new pingSaaSrv_resultStandardScheme();
      }
    }

    private static class pingSaaSrv_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pingSaaSrv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pingSaaSrv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pingSaaSrv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pingSaaSrv_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pingSaaSrv_resultTupleScheme getScheme() {
        return new pingSaaSrv_resultTupleScheme();
      }
    }

    private static class pingSaaSrv_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pingSaaSrv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pingSaaSrv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pingSaaSrv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
